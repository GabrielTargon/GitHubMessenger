//
//  ChatViewController.swift
//  GitHubMessenger
//
//  Created by Gabriel Targon on 12/03/20.
//  Copyright (c) 2020 Gabriel Targon. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData

protocol ChatDisplayLogic: class {
//    func displaySomething(viewModel: Chat.Something.ViewModel)
}

class ChatViewController: UIViewController, ChatDisplayLogic {
    //Architecture variables
    var interactor: ChatBusinessLogic?
    var router: (NSObjectProtocol & ChatRoutingLogic & ChatDataPassing)?
    
    //IBOutlets
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var sendMessageView: UIView!
    @IBOutlet weak var sendMessageTextField: UITextField!
    @IBOutlet weak var sendMessageButton: UIButton!
    
    //Constraints
    @IBOutlet weak var sendMessageViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var sendMessageViewBottomConstraint: NSLayoutConstraint!
    
    //Variables
    var user: NamesList.User
    private var messages: [NSManagedObject] = []
    private let sendMessageViewHeight: CGFloat = 60
    private let sendMessageViewHeightIphoneXAndLater: CGFloat = 94
    private let sendMessageViewWidth: CGFloat = UIScreen.main.bounds.width
    private var isKeyboardVisible: Bool = false
    private var willDismissKeyboard: Bool = false
    private var keyboardSize: CGRect = CGRect.init(x: 0, y: 0, width: 0, height: 0)
    private var cellIdentifier = String(describing: ChatBubbleCell.self)
    
    // MARK: Object lifecycle
    
    class func instantiateNew() -> ChatViewController {
        guard let viewController = UIStoryboard(name: "Chat", bundle: nil).instantiateViewController(withIdentifier: String(describing: self)) as? ChatViewController
            else { fatalError("Couldn't instantiate \(String(describing: self))") }
        return viewController
    }
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        user = NamesList.User(login: "", id: 0, avatar: "")
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        user = NamesList.User(login: "", id: 0, avatar: "")
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ChatInteractor()
        let presenter = ChatPresenter()
        let router = ChatRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setupView()
        setupTableView()
        setSendMessageViewFrame()
    }
    
    func setupView() {
        title = user.login
        sendMessageButton.isEnabled = false
        sendMessageTextField.addTarget(self, action: #selector(editingChanged), for: .editingChanged)
        
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow(_:)), name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardDidShow(_:)), name: UIResponder.keyboardDidShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(_:)), name: UIResponder.keyboardWillHideNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardDidHide(_:)), name: UIResponder.keyboardDidHideNotification, object: nil)
    }
    
    override func viewDidLayoutSubviews() {
        tableView.rowHeight = UITableView.automaticDimension
        tableView.estimatedRowHeight = 44
    }
    
    private func setupTableView() {
        self.tableView.dataSource = self
        self.tableView.delegate = self
        self.tableView.register(ChatBubbleCell.self, forCellReuseIdentifier: cellIdentifier)
        
        getMessages()
    }
    
    private func setSendMessageViewFrame() {
        if let content = self.sendMessageView {
            if UIDevice.current.screenType == .iPhonesX {
                content.frame = CGRect.init(x: 0, y: (UIScreen.main.bounds.height - sendMessageViewHeightIphoneXAndLater), width: sendMessageViewWidth, height: sendMessageViewHeightIphoneXAndLater)
                sendMessageViewHeightConstraint.constant = sendMessageViewHeightIphoneXAndLater
            } else {
                content.frame = CGRect.init(x: 0, y: (UIScreen.main.bounds.height - sendMessageViewHeight), width: sendMessageViewWidth, height: sendMessageViewHeight)
                sendMessageViewHeightConstraint.constant = sendMessageViewHeight
            }
        }
    }
    
    // MARK: Functions
    
    private func sendOutgoingMessage(_ message: String) {
        saveMessage(text: message, type: "outgoing", date: Date(), friend: user.login)
        
        tableView.reloadData()
    }
    
    func saveMessage(text: String, type: String, date: Date, friend: String) {
        guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else {
            return
        }
        
        let managedContext = appDelegate.persistentContainer.viewContext
        let entity = NSEntityDescription.entity(forEntityName: "Message", in: managedContext)!
        let message = NSManagedObject(entity: entity, insertInto: managedContext)
        message.setValue(text, forKeyPath: "text")
        message.setValue(type, forKeyPath: "type")
        message.setValue(date, forKeyPath: "date")
        message.setValue(friend, forKeyPath: "friend")
        
        do {
            try managedContext.save()
            messages.append(message)
        } catch let error as NSError {
            print("Could not save. \(error), \(error.userInfo)")
        }
    }
    
    func getMessages() {
        guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else {
            return
        }
        
        let managedContext = appDelegate.persistentContainer.viewContext
        let fetchRequest = NSFetchRequest<NSManagedObject>(entityName: "Message")
        
        do {
            messages = try managedContext.fetch(fetchRequest)
        } catch let error as NSError {
            print("Could not fetch. \(error), \(error.userInfo)")
        }
    }
    
    @objc func editingChanged(sender: UITextField) {
        guard let name = sendMessageTextField.text, !name.isEmpty else {
            sendMessageButton.isEnabled = false
            return
        }
        
        sendMessageButton.isEnabled = true
        
    }
    
    private func scrollToBottom() {
        let point = CGPoint(x: 0, y: tableView.contentSize.height + tableView.contentInset.bottom - tableView.frame.height)
        if point.y >= 0{
            tableView.setContentOffset(point, animated: true)
        }
        tableView.layoutIfNeeded()
    }
    
    // MARK: Keyboard behaviour

    @objc func keyboardDidShow(_ notification: NSNotification) {
        isKeyboardVisible = true
        guard let info = notification.userInfo else{
            return
        }
        let keyboardFrame: CGRect = (info[UIResponder.keyboardFrameEndUserInfoKey] as! NSValue).cgRectValue
        keyboardSize = keyboardFrame
    }

    @objc func keyboardWillShow(_ notification: NSNotification) {
        if let info = notification.userInfo {
            let keyboardFrame: CGRect = (info[UIResponder.keyboardFrameEndUserInfoKey] as! NSValue).cgRectValue
            sendMessageViewHeightConstraint.constant = sendMessageViewHeight
            sendMessageViewBottomConstraint.constant = keyboardFrame.height
            scrollToBottom()
        }
    }

    @objc func keyboardDidHide(_ notification: NSNotification) {
        isKeyboardVisible = false
        willDismissKeyboard = false
        keyboardSize = CGRect.init(x: 0, y: 0, width: 0, height: 0)
        setSendMessageViewFrame()
    }

    @objc func keyboardWillHide(_ notification: NSNotification) {
        sendMessageViewBottomConstraint.constant = 0
    }
    
    // MARK: Actions
    
    @IBAction func sendMessage(_ sender: Any) {
        if let text = sendMessageTextField.text {
            saveMessage(text: text, type: "incoming", date: Date(), friend: user.login)
            
            sendOutgoingMessage(text)
            
            sendMessageTextField.text = nil
            sendMessageButton.isEnabled = false
            scrollToBottom()
        }
    }
    
    
}

extension ChatViewController: UITableViewDelegate, UITableViewDataSource {
    // MARK: TableView Functions
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return messages.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let typeMsg = messages[indexPath.row]
        if typeMsg.value(forKeyPath: "friend") as? String == user.login {
            if typeMsg.value(forKeyPath: "type") as? String == "incoming" {
                let incomingCell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier) as! ChatBubbleCell
                incomingCell.type = .incoming
                return incomingCell
            } else if typeMsg.value(forKeyPath: "type") as? String == "outgoing" {
                let outgoingCell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier) as! ChatBubbleCell
                outgoingCell.type = .outgoing
                return outgoingCell
            }
        }
        return UITableViewCell()
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        
        if let messageText = messages[indexPath.row].value(forKeyPath: "text") as? String {
            let size = CGSize(width: 250, height: 100)
            let options = NSStringDrawingOptions.usesFontLeading.union(.usesLineFragmentOrigin)
            let estimatedFrame = NSString(string: messageText).boundingRect(with: size, options: options, attributes: [NSAttributedString.Key.font : UIFont.systemFont(ofSize: 16)], context: nil)
            return estimatedFrame.height + 25
        }
        return 44
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        guard let text = messages[indexPath.row].value(forKeyPath: "text") as? String else {
            return
        }
        
        guard let chatCell = cell as? ChatBubbleCell else {
            return
        }
        
        chatCell.setLabelSize(messageText: text, type: chatCell.type)
    }
}
