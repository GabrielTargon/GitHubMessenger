//
//  NamesListViewController.swift
//  GitHubMessenger
//
//  Created by Gabriel Targon on 12/03/20.
//  Copyright (c) 2020 Gabriel Targon. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NamesListDisplayLogic: class {
    func displayChat(viewModel: NamesList.Name.ViewModel)
    func displayUserList(viewModel: [NamesList.User])
}

class NamesListViewController: UIViewController, NamesListDisplayLogic {
    //Architecture variables
    var interactor: NamesListBusinessLogic?
    var router: (NSObjectProtocol & NamesListRoutingLogic & NamesListDataPassing)?
    
    //IBOutlets
    @IBOutlet var tableView: UITableView!
    
    //Variables
    var indicator = UIActivityIndicatorView()
    var userList: [NamesList.User]
    
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        userList = [NamesList.User]()
        
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        userList = [NamesList.User]()
        
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = NamesListInteractor()
        let presenter = NamesListPresenter()
        let router = NamesListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setupTableView()
        activityIndicator()
        interactor?.handleGetUserInfo()
    }
    
    func setupTableView() {
        self.tableView.dataSource = self
        self.tableView.delegate = self
        
        let nib = UINib(nibName: "NamesListTableViewCell", bundle: nil)
        self.tableView.register(nib, forCellReuseIdentifier: "namesCell")
    }
    
    // MARK: Functions
    
    func activityIndicator() {
        indicator = UIActivityIndicatorView(frame: CGRect(x: 0, y: 0, width: 40, height: 40))
        indicator.style = .large
        indicator.center = self.view.center
        indicator.backgroundColor = .white
        indicator.hidesWhenStopped = true
        indicator.startAnimating()
        self.view.addSubview(indicator)
    }
    
    func displayChat(viewModel: NamesList.Name.ViewModel) {
        router?.routeToChat(userInfo: viewModel.user)
    }
    
    func displayUserList(viewModel: [NamesList.User]) {
        userList = viewModel
        
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }
    
}

extension NamesListViewController: UITableViewDataSource, UITableViewDelegate {
    // MARK: TableView Functions
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let cell = tableView.dequeueReusableCell(withIdentifier: "namesCell") as! NamesListTableViewCell
        return cell.frame.size.height
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return userList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "namesCell") as! NamesListTableViewCell
        return cell
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if let userCell = cell as? NamesListTableViewCell {
            if !userList.isEmpty {
                indicator.stopAnimating()
                
                userCell.profileImage.image = nil
                userCell.profileLabel.text = userList[indexPath.row].login
                
                let url = URL(string: userList[indexPath.row].avatarUrl)
                
                DispatchQueue.global().async {
                    let data = try? Data(contentsOf: url!)
                    DispatchQueue.main.async {
                        userCell.profileImage.image = UIImage(data: data!)
                    }
                }
            }
        }
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        interactor?.handleNameTouched(request: NamesList.Name.Request(user: userList[indexPath.row]))
        self.tableView.deselectRow(at: indexPath, animated: true)
    }
    
}
