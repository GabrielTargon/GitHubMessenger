//
//  NamesListViewController.swift
//  GitHubMessenger
//
//  Created by Gabriel Targon on 12/03/20.
//  Copyright (c) 2020 Gabriel Targon. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NamesListDisplayLogic: AnyObject {
    func displayChat()
    func displayUserList(viewModel: [NamesList.User])
}

class NamesListViewController: UIViewController, NamesListDisplayLogic {
    //Architecture variables
    typealias NamesListRoutingProtocol = NamesListRoutingLogic & NamesListDataPassing
    var interactor: NamesListBusinessLogic?
    var router: (NamesListRoutingProtocol)?
    
    var namesView = NamesListView()
    
    var userList = [NamesList.User]()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setupNamesList()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setupNamesList()
    }
    
    // MARK: Setup
    
    func setupNamesList() {
        let viewController = self
        let worker = NamesListWorker()
        let presenter = NamesListPresenter(viewController: viewController)
        let interactor = NamesListInteractor(presenter: presenter, worker: worker)
        let router = NamesListRouter(viewController: viewController, dataStore: interactor)
        setup(interactor: interactor, router: router)
    }
    
    func setup(interactor: NamesListBusinessLogic? = nil, router: NamesListRoutingProtocol? = nil) {
        self.interactor = interactor
        self.router = router
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        namesView.indicator.startAnimating()
        interactor?.handleGetUserInfo()
    }
    
    // MARK: Functions
    
    func displayChat() {
        router?.routeToChat()
    }
    
    func displayUserList(viewModel: [NamesList.User]) {
        userList = viewModel
        
        DispatchQueue.main.async {
            self.namesView.tableView.reloadData()
        }
    }
}

extension NamesListViewController: UITableViewDataSource, UITableViewDelegate {
    // MARK: TableView Functions
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 85
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return userList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = namesView.tableView.dequeueReusableCell(withIdentifier: namesView.cellIdentifier) as? NameListCell else {
            return UITableViewCell()
        }
        return cell
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if let userCell = cell as? NameListCell {
            if !userList.isEmpty {
                namesView.indicator.stopAnimating()
                
                userCell.imageProfile.image = nil
                userCell.labelProfile.text = userList[indexPath.row].login
                
                DispatchQueue.global().async {
                    guard let url = URL(string: self.userList[indexPath.row].avatarUrl) else {
                        return
                    }
                    
                    do {
                        let data = try Data(contentsOf: url)
                        DispatchQueue.main.async {
                            userCell.imageProfile.image = UIImage(data: data)
                        }
                    } catch let error as NSError {
                        DispatchQueue.main.async {
                            userCell.imageProfile.image = UIImage(named: "user_default")
                        }
                        print("Could not fetch. \(error), \(error.userInfo)")
                    }
                }
            }
        }
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        interactor?.handleNameTouched(request: NamesList.Name.Request(user: userList[indexPath.row]))
    }
}

extension NamesListViewController: ViewCode {
    func setupHierarchy() {
        view = namesView
        
        namesView.tableView.delegate = self
        namesView.tableView.dataSource = self
    }
    
    func setupConstraints() {
        // No constraints needed
    }
    
    func setupConfigurations() {
        self.title = "GitHubMessenger"
        view.backgroundColor = .white
    }
}
