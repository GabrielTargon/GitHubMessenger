//
//  ChatViewController.swift
//  GitHubMessenger
//
//  Created by Gabriel Targon on 12/03/20.
//  Copyright (c) 2020 Gabriel Targon. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData

protocol ChatDisplayLogic: AnyObject {}

class ChatViewController: UIViewController, ChatDisplayLogic {
    typealias ChatRoutingProtocol = ChatRoutingLogic & ChatDataPassing
    var interactor: ChatBusinessLogic?
    var router: (ChatRoutingProtocol)?
    
    lazy var tableView: UITableView = {
        let tableView = UITableView(frame: .zero)
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.tableFooterView = UIView()
        tableView.backgroundColor = .clear
        tableView.separatorStyle = .none
        return tableView
    }()
    
    lazy var sendMessageView: SendMessageView = {
        let view = SendMessageView(frame: .zero)
        view.translatesAutoresizingMaskIntoConstraints = false
        view.textField.addTarget(self, action: #selector(editingChanged), for: .editingChanged)
        view.sendButton.addTarget(self, action: #selector(sendMessage), for: .touchUpInside)
        return view
    }()
    
    lazy var grayBottomView: UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        view.backgroundColor = .systemGray5
        return view
    }()
    
    var user = String()
    var messages: [NSManagedObject] = []
    private var isKeyboardVisible: Bool = false
    private var willDismissKeyboard: Bool = false
    private var sendMessageFrameY: CGFloat = 34
    private let sendMessageViewHeight: CGFloat = 60
    private var keyboardSize: CGRect = CGRect.init(x: 0, y: 0, width: 0, height: 0)
    private var cellIdentifier = String(describing: BubbleCell.self)
    
    private var sendMessageViewBottomConstraint = NSLayoutConstraint()
    
    // MARK: Lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setupView()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setupView()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        scrollToBottom()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        getInfos()
    }
    
    // MARK: Setup
    
    func setup(interactor: ChatBusinessLogic? = nil, router: ChatRoutingProtocol? = nil) {
        self.interactor = interactor
        self.router = router
    }
    
    // MARK: Functions
    
    func getInfos() {
        guard let userLogin = interactor?.returnUserLogin(),
              let msg = interactor?.getMessages() else {
            return
        }
        
        user = userLogin
        messages = msg
        
        self.title = user
    }
    
    func scrollToBottom() {
        let point = CGPoint(x: 0, y: tableView.contentSize.height + tableView.contentInset.bottom - tableView.frame.height)
        if point.y >= 0 {
            tableView.setContentOffset(point, animated: true)
        }
        tableView.layoutIfNeeded()
    }
    
    // MARK: Keyboard behaviour

    @objc func keyboardDidShow(_ notification: NSNotification) {
        isKeyboardVisible = true
        guard let info = notification.userInfo else{
            return
        }
        let keyboardFrame: CGRect = (info[UIResponder.keyboardFrameEndUserInfoKey] as! NSValue).cgRectValue
        keyboardSize = keyboardFrame
    }

    @objc func keyboardWillShow(_ notification: NSNotification) {
        if let info = notification.userInfo {
            let keyboardFrame: CGRect = (info[UIResponder.keyboardFrameEndUserInfoKey] as! NSValue).cgRectValue
            sendMessageViewBottomConstraint.constant = -keyboardFrame.height + grayBottomView.frame.height
            scrollToBottom()
        }
    }

    @objc func keyboardDidHide(_ notification: NSNotification) {
        isKeyboardVisible = false
        willDismissKeyboard = false
        keyboardSize = CGRect.zero
    }

    @objc func keyboardWillHide(_ notification: NSNotification) {
        sendMessageViewBottomConstraint.constant = 0
    }
    
    // MARK: Actions
    
    @objc func editingChanged(sender: UITextField) {
        guard let name = sendMessageView.textField.text, !name.isEmpty else {
            sendMessageView.sendButton.isEnabled = false
            return
        }
        
        sendMessageView.sendButton.isEnabled = true
    }
    
    @objc func sendMessage(_ sender: Any) {
        if let text = sendMessageView.textField.text {
            interactor?.saveMessage(request: Chat.Message.Request(text: text, type: .incoming, date: Date(), friend: user))
            interactor?.saveMessage(request: Chat.Message.Request(text: text, type: .outgoing, date: Date(), friend: user))
            getInfos()
            
            tableView.reloadData()
            
            sendMessageView.textField.text = nil
            sendMessageView.sendButton.isEnabled = false
            scrollToBottom()
        }
    }
}

extension ChatViewController: UITableViewDelegate, UITableViewDataSource {
    // MARK: TableView Functions
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return messages.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let typeMsg = messages[indexPath.row]
        if typeMsg.value(forKeyPath: "friend") as? String == user {
            if typeMsg.value(forKeyPath: "type") as? String == "incoming" {
                let incomingCell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier) as! BubbleCell
                incomingCell.type = .incoming
                return incomingCell
            } else if typeMsg.value(forKeyPath: "type") as? String == "outgoing" {
                let outgoingCell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier) as! BubbleCell
                outgoingCell.type = .outgoing
                return outgoingCell
            }
        }
        return UITableViewCell()
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        
        if let messageText = messages[indexPath.row].value(forKeyPath: "text") as? String {
            let size = CGSize(width: 250, height: 100)
            let options = NSStringDrawingOptions.usesFontLeading.union(.usesLineFragmentOrigin)
            let estimatedFrame = NSString(string: messageText).boundingRect(with: size, options: options, attributes: [NSAttributedString.Key.font : UIFont.systemFont(ofSize: 16)], context: nil)
            return estimatedFrame.height + 25
        }
        return 44
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        guard let text = messages[indexPath.row].value(forKeyPath: "text") as? String else {
            return
        }
        
        guard let chatCell = cell as? BubbleCell else {
            return
        }
        
        chatCell.setLabelSize(messageText: text, type: chatCell.type)
    }
}

extension ChatViewController: ViewCode {
    func setupHierarchy() {
        view.addSubview(tableView)
        view.addSubview(sendMessageView)
        view.addSubview(grayBottomView)
    }
    
    func setupConstraints() {
        sendMessageViewBottomConstraint = NSLayoutConstraint(item: sendMessageView, attribute: NSLayoutConstraint.Attribute.bottom, relatedBy: NSLayoutConstraint.Relation.equal, toItem: grayBottomView, attribute: NSLayoutConstraint.Attribute.top, multiplier: 1, constant: 0)
        
        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            
            sendMessageView.heightAnchor.constraint(equalToConstant: sendMessageViewHeight),
            sendMessageView.topAnchor.constraint(equalTo: tableView.bottomAnchor),
            sendMessageView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            sendMessageView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            sendMessageViewBottomConstraint,
            
            grayBottomView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),
            grayBottomView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            grayBottomView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            grayBottomView.leadingAnchor.constraint(equalTo: view.leadingAnchor)
        ])
    }
    
    func setupConfigurations() {
        view.backgroundColor = .white
        
        // TableView
        tableView.dataSource = self
        tableView.delegate = self
        tableView.register(BubbleCell.self, forCellReuseIdentifier: cellIdentifier)
        tableView.rowHeight = UITableView.automaticDimension
        tableView.estimatedRowHeight = 44
        tableView.allowsSelection = false
        
        // Observers
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow(_:)), name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardDidShow(_:)), name: UIResponder.keyboardDidShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(_:)), name: UIResponder.keyboardWillHideNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardDidHide(_:)), name: UIResponder.keyboardDidHideNotification, object: nil)
        
        sendMessageFrameY = sendMessageView.frame.origin.y
    }
}
